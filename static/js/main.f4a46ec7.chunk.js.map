{"version":3,"sources":["Navbar.tsx","CollapsibleObject.tsx","EditorContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","bg","variant","expand","Brand","href","CollapsibleObject","obj","name","isOpenProp","isOpen","console","log","children","useState","setIsOpen","button","className","onClick","Array","map","child","idx","toString","Object","entries","style","display","EditorContainer","title","onTypeChange","currentMode","typeLabel","options","DropdownButton","size","modeType","Dropdown","Item","e","OUTPUT_TYPES","INPUT_TYPES","EDITOR_BASE_PROPS","height","theme","width","STARTING_INPUTS","inputText","templateText","inputType","a","liquid","Liquid","vars","parseInput","parseAndRender","JSON","parse","xml2js","compact","err","App","setInputText","setTemplateText","outputType","setOutputType","setInputType","output","setOutput","breakpoint","useBreakpoint","sizes","useEffect","document","querySelectorAll","forEach","elt","element","isLandscape","removeProperty","evaluateTemplate","then","out","direction","gutterSize","gutterAlign","cursor","inType","mode","value","onChange","outType","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4a46ec7.chunk.js","sourcesContent":["import {Navbar, NavDropdown, Nav, Form, FormControl, Button} from 'react-bootstrap';\n\n\n\n\nexport function NavBar() {\n  return <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n    <Navbar.Brand href=\"#home\">Liquid Template Editor</Navbar.Brand>\n  </Navbar>\n}\n","import React, { ReactNode, useState } from \"react\"\n\nexport type PlainObject = { [name: string]: PlainObject|string|number }\n\n\nexport function CollapsibleObject({obj, name, isOpen: isOpenProp}: {obj: PlainObject|string|number; name: string, isOpen?: boolean}): JSX.Element {\n  console.log({obj, name});\n  const [isOpen, setIsOpen] = useState(isOpenProp);\n  if (typeof obj === 'string') {\n    return <>{name}: {obj}</>\n  } else if (typeof obj === 'number') {\n    return <>{name}: {obj}</>\n  } \n\n  let children: JSX.Element[];\n  const button = <button className=\"collapsible-object-button\"  onClick={() => setIsOpen(isOpen => !isOpen)}>{name}</button>\n  if (obj instanceof Array) {\n    children = obj.map((child, idx) => <CollapsibleObject name={idx.toString()} obj={child} isOpen={true} />);\n  } else {\n    children = Object.entries(obj).map(([name, child]) => <CollapsibleObject name={name} obj={child} />);\n  }\n  \n  return  (\n    <div className={`collapsible-object-node ${name}`}>\n      {button}\n      <div className=\"collapsible-object-children\" style={{display: isOpen ? 'block': 'none'}}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nexport function EditorContainer<ModeType extends string>({\n  title,\n  children,\n  onTypeChange,\n  currentMode,\n  typeLabel,\n  options,\n}: {\n  title: ReactNode;\n  children: React.ReactNode;\n  onTypeChange?: (e: ModeType) => void;\n  currentMode: ModeType;\n  typeLabel?: string;\n  options: ModeType[];\n}) {\n  return (\n    <div className=\"editor-container\">\n      <div className=\"editor-control-panel\">\n        <label className=\"editor-label\">{title}</label>\n        {onTypeChange && (\n          <span className=\"editor-type-container\">\n            {typeLabel && <label className=\"type-label\">Output Type: </label>}\n            <DropdownButton\n              className=\"mode-type-dropdown\"\n              title={currentMode}\n              variant=\"secondary\"\n              size=\"sm\"\n            >\n              {options.map((modeType) => (\n                <Dropdown.Item key={modeType} onClick={(e) => onTypeChange(modeType)}>\n                  {modeType}\n                </Dropdown.Item>\n              ))}\n            </DropdownButton>\n          </span>\n        )}\n      </div>\n      <div className=\"editor-container-children\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Liquid } from \"liquidjs\";\nimport logo from \"./logo.svg\";\nimport useBreakpoint from \"@w11r/use-breakpoint\";\nimport AceEditor, { split as SplitAceEditor } from \"react-ace\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { xml2js } from \"xml-js\";\nimport Split from \"react-split\";\nimport \"./App.css\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-liquid\";\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/mode-yaml\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport { NavBar } from \"./Navbar\";\nimport { CollapsibleObject } from \"./CollapsibleObject\";\nimport { getEffectiveTypeParameterDeclarations } from \"typescript\";\nimport { EditorContainer } from \"./EditorContainer\";\n\ntype OutputType = \"json\" | \"xml\" | \"yaml\" | \"html\";\ntype InputType = \"json\" | \"xml\" | \"yaml\";\n\nconst OUTPUT_TYPES: OutputType[] = [\"json\", \"xml\", \"yaml\", \"html\"];\nconst INPUT_TYPES: InputType[] = [\"json\", \"xml\", \"yaml\"];\n\nconst EDITOR_BASE_PROPS = {\n  height: \"100%\",\n  theme: \"github\",\n  width: \"100%\",\n};\n\n// const breakpoints = {\n//   smallWidth: [800, 2000],\n//   smallHeight: [2000, 800],\n// }\n\n\nconst STARTING_INPUTS = {\n  simpleJson: '{\"name\": \"doug\"}',\n  nestedJson: '{\"people\": [{\"name\": \"clide\"}, {\"name\": \"doug\"}, {\"name\": \"bob\"}]}',\n}\n\nfunction App() {\n  const [inputText, setInputText] = useState(STARTING_INPUTS.nestedJson);\n  const [templateText, setTemplateText] = useState(\"<div>hello {{name}}</div>\");\n  const [outputType, setOutputType] = useState<OutputType>(\"html\");\n  const [inputType, setInputType] = useState<InputType>(\"json\");\n  const [output, setOutput] = useState(\"\");\n  const breakpoint = useBreakpoint();\n  const [sizes, setSizes] = useState([33, 33, 33]);\n\n  useEffect(() => {\n    const editorContainers = document.querySelectorAll(\".editor-list > *\");\n    editorContainers.forEach((elt) => {\n      const element = elt as HTMLDivElement;\n      console.log(elt);\n      if (breakpoint.isLandscape) {\n        element.style.removeProperty(\"height\");\n      } else {\n        element.style.removeProperty(\"width\");\n      }\n    });\n\n  }, [breakpoint.isLandscape]);\n\n  useEffect(() => {\n    console.log(\"evaluating...\");\n    evaluateTemplate(inputText, templateText, inputType).then((out) => {\n      setOutput(out);\n      console.log(out);\n    });\n  }, [templateText, inputText]);\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Split\n        className=\"editor-list\"\n        sizes={sizes}\n        direction={breakpoint.isLandscape ? \"horizontal\" : \"vertical\"}\n        gutterSize={10}\n        gutterAlign=\"center\"\n        cursor=\"col-resize\"\n      >\n        <EditorContainer\n          title=\"Input\"\n          currentMode={inputType}\n          onTypeChange={(inType) => setInputType(inType)}\n          options={INPUT_TYPES}\n        >\n          <AceEditor\n            {...EDITOR_BASE_PROPS}\n            mode={inputType}\n            value={inputText}\n            onChange={(value: string) => setInputText(value)}\n          ></AceEditor>\n          <CollapsibleObject obj={parseInput(inputText, inputType)} name=\"root\" isOpen={true}/>\n        </EditorContainer>\n        <EditorContainer title=\"Template\" currentMode={outputType} options={OUTPUT_TYPES}>\n          <AceEditor\n            {...EDITOR_BASE_PROPS}\n            mode={outputType}\n            onChange={(value: string) => setTemplateText(value)}\n            value={templateText}\n          ></AceEditor>\n        </EditorContainer>\n        <EditorContainer\n          title=\"Output\"\n          currentMode={outputType}\n          onTypeChange={(outType) => setOutputType(outType)}\n          typeLabel=\"Output Type\"\n          options={OUTPUT_TYPES}\n        >\n          <AceEditor\n            {...EDITOR_BASE_PROPS}\n            value={output}\n            mode={outputType}\n            readOnly={true}\n          ></AceEditor>\n        </EditorContainer>\n      </Split>\n    </div>\n  );\n}\n\nasync function evaluateTemplate(\n  inputText: string,\n  templateText: string,\n  inputType: InputType\n): Promise<string> {\n  const liquid = new Liquid();\n  try {\n    const vars = parseInput(inputText, inputType);\n    console.log(vars);\n    return await liquid.parseAndRender(templateText, vars);\n  } catch (err) {\n    return err.toString();\n  }\n}\n\nfunction parseInput(inputText: string, inputType: InputType) {\n  try {\n    switch (inputType) {\n      case \"json\":\n        return JSON.parse(inputText);\n      case \"xml\":\n        return xml2js(inputText, { compact: true });\n    }\n  } catch(err) {\n    return err\n  }\n}\n\nclass ConvertedXMLObject {\n  public text: string;\n  constructor(obj: any) {\n    this.text = obj._text;\n  }\n  toString() {\n    return this.text;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}