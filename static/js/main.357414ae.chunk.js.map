{"version":3,"sources":["Navbar.tsx","EditorContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Navbar","bg","variant","expand","Brand","href","EditorContainer","title","children","onTypeChange","currentMode","typeLabel","options","useResizeDetector","width","height","ref","console","log","className","DropdownButton","size","map","modeType","Dropdown","Item","onClick","e","undefined","OUTPUT_TYPES","EDITOR_BASE_PROPS","theme","STARTING_INPUTS","inputText","templateText","inputType","a","liquid","Liquid","vars","parseInput","parseAndRender","toString","JSON","parse","err","App","useState","setInputText","setTemplateText","outputType","setOutputType","output","setOutput","breakpoint","useBreakpoint","sizes","useEffect","document","querySelectorAll","forEach","elt","element","isLandscape","style","removeProperty","evaluateTemplate","then","out","direction","gutterSize","gutterAlign","cursor","mode","value","onChange","outType","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.357414ae.chunk.js","sourcesContent":["import {Navbar, NavDropdown, Nav, Form, FormControl, Button} from 'react-bootstrap';\n\n\n\n\nexport function NavBar() {\n  return <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n    <Navbar.Brand href=\"#home\">Liquid Template Editor</Navbar.Brand>\n  </Navbar>\n}\n","import React, { ReactNode } from \"react\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\nexport function EditorContainer<ModeType extends string>({\n  title,\n  children,\n  onTypeChange,\n  currentMode,\n  typeLabel,\n  options,\n}: {\n  title: ReactNode;\n  children: (props: { width?: string; height?: string }) => React.ReactNode;\n  onTypeChange?: (e: ModeType) => void;\n  currentMode: ModeType;\n  typeLabel?: string;\n  options?: ModeType[];\n}) {\n  const { width, height, ref } = useResizeDetector();\n  console.log({ width, height });\n  return (\n    <div className=\"editor-container\">\n      <div className=\"editor-control-panel\">\n        <label className=\"editor-label\">{title}</label>\n        {onTypeChange && (\n          <span className=\"editor-type-container\">\n            {typeLabel && <label className=\"type-label\">Output Type: </label>}\n            {options && onTypeChange && (\n              <DropdownButton\n                className=\"mode-type-dropdown\"\n                title={currentMode}\n                variant=\"secondary\"\n                size=\"sm\"\n              >\n                {options.map((modeType) => (\n                  <Dropdown.Item key={modeType} onClick={(e) => onTypeChange(modeType)}>\n                    {modeType}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n            )}\n          </span>\n        )}\n      </div>\n      <div className=\"editor-container-children\" ref={ref as React.Ref<HTMLDivElement>}>\n        {children({\n          width: width ? `${width - 20}px` : undefined,\n          height: height ? `${height - 20}px` : undefined,\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Liquid } from \"liquidjs\";\nimport logo from \"./logo.svg\";\nimport useBreakpoint from \"@w11r/use-breakpoint\";\nimport AceEditor, { split as SplitAceEditor } from \"react-ace\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Split from \"react-split\";\nimport \"./App.css\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-liquid\";\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/mode-yaml\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport { NavBar } from \"./Navbar\";\nimport { CollapsibleObject } from \"./CollapsibleObject\";\nimport { getEffectiveTypeParameterDeclarations } from \"typescript\";\nimport { EditorContainer } from \"./EditorContainer\";\n\ntype OutputType = \"json\" | \"xml\" | \"yaml\" | \"html\";\ntype InputType = \"json\";\n\nconst OUTPUT_TYPES: OutputType[] = [\"json\", \"xml\", \"yaml\", \"html\"];\nconst INPUT_TYPES: InputType[] = [\"json\"];\n\nconst EDITOR_BASE_PROPS = {\n  theme: \"github\",\n  // height: \"500px\",\n  // width: \"100%\",\n};\n\n// const breakpoints = {\n//   smallWidth: [800, 2000],\n//   smallHeight: [2000, 800],\n// }\n\n\nconst STARTING_INPUTS = {\n  simpleJson: '{\"name\": \"world\"}',\n}\n\nfunction App() {\n  const [inputText, setInputText] = useState(STARTING_INPUTS.simpleJson);\n  const [templateText, setTemplateText] = useState(\"<div>hello {{name}}</div>\");\n  const [outputType, setOutputType] = useState<OutputType>(\"html\");\n  const [inputType, setInputType] = useState<InputType>(\"json\");\n  const [output, setOutput] = useState(\"\");\n  const breakpoint = useBreakpoint();\n  const [sizes, setSizes] = useState([33, 33, 33]);\n\n  useEffect(() => {\n    const editorContainers = document.querySelectorAll(\".editor-list > *\");\n    editorContainers.forEach((elt) => {\n      const element = elt as HTMLDivElement;\n      console.log(elt);\n      if (breakpoint.isLandscape) {\n        element.style.removeProperty(\"height\");\n      } else {\n        element.style.removeProperty(\"width\");\n      }\n    });\n\n  }, [breakpoint.isLandscape]);\n\n  useEffect(() => {\n    console.log(\"evaluating...\");\n    evaluateTemplate(inputText, templateText, inputType).then((out) => {\n      setOutput(out);\n      console.log(out);\n    });\n  }, [templateText, inputText]);\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Split\n        className=\"editor-list\"\n        sizes={sizes}\n        direction={breakpoint.isLandscape ? \"horizontal\" : \"vertical\"}\n        gutterSize={10}\n        gutterAlign=\"center\"\n        cursor=\"col-resize\"\n      >\n        <EditorContainer\n          title=\"Input\"\n          currentMode={'json'}\n        >\n        {({width, height}) => \n          <AceEditor\n            {...EDITOR_BASE_PROPS}\n            width={width}\n            height={height}\n            mode={inputType}\n            value={inputText}\n            onChange={(value: string) => setInputText(value)}\n          ></AceEditor>\n        }\n        </EditorContainer>\n        <EditorContainer title=\"Template\" currentMode={outputType} options={OUTPUT_TYPES}>\n          {({width, height})  => <AceEditor\n            {...EDITOR_BASE_PROPS}\n            width={width}\n            height={height}\n            mode={\"liquid\"}\n            onChange={(value: string) => setTemplateText(value)}\n            value={templateText}\n          ></AceEditor>}\n        </EditorContainer>\n        <EditorContainer\n          title=\"Output\"\n          currentMode={outputType}\n          onTypeChange={(outType) => setOutputType(outType)}\n          typeLabel=\"Output Type\"\n          options={OUTPUT_TYPES}\n        >\n        {({width, height}) => \n          <AceEditor\n            {...EDITOR_BASE_PROPS}\n            width={width}\n            height={height}\n            value={output}\n            mode={outputType}\n            readOnly={true}\n          ></AceEditor>\n        }\n        </EditorContainer>\n      </Split>\n    </div>\n  );\n}\n\nasync function evaluateTemplate(\n  inputText: string,\n  templateText: string,\n  inputType: InputType\n): Promise<string> {\n  const liquid = new Liquid();\n  try {\n    const vars = parseInput(inputText, inputType);\n    console.log(vars);\n    return await liquid.parseAndRender(templateText, vars);\n  } catch (err) {\n    return err.toString();\n  }\n}\n\nfunction parseInput(inputText: string, inputType: InputType) {\n  try {\n    switch (inputType) {\n      case \"json\":\n        return JSON.parse(inputText);\n    }\n  } catch(err) {\n    return err\n  }\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}